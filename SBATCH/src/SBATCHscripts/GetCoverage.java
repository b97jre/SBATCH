package SBATCHscripts;

import general.ExtendedWriter;
import general.ExtendedReader;
import general.Functions;
import general.IOTools;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.EnumSet;
import java.util.Hashtable;

import SBATCHscripts.GeneralPairFile.Programs;

public class GetCoverage {

	String referenceFile;

	public GetCoverage(){
	}

	
	
	
	public static boolean checkParameters(Hashtable<String, String> T){
		boolean allPresent = true;

		if (!T.containsKey("-r")) {
				allPresent = false;
		}
		if(allPresent) return true;
		help();
		return false;
	}
	
	
	public boolean addParameters(Hashtable<String, String> T, SBATCHinfo sbatch){
		boolean allPresent = true;

		referenceFile = Functions.getValue(T, "-r");
		if(allPresent) return true;
		
		return true;
	}
	


	
	public static void help(){

		System.out.println();
		System.out.println();
		System.out.println("Mandatory values for BEDtools getCoverage:");
		System.out.println(Functions.fixedLength("-i <pathToSTARref>", 50)+"The reference directory generated by STAR");
		System.out.println(Functions.fixedLength("-r	arameterFile <pathToParamterFile>", 50)+"File containing all the extra inormation regarding parameters");
		System.out.println(Functions.fixedLength("-o <outDir>", 50)+"The path to the where the outFiles should end up");

		System.out.println("Mandatory values if working on directory:");
		System.out.println();

	}

}





